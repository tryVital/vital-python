# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class LabTestGenerationMethodFilter(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    AUTO = "auto"
    MANUAL = "manual"
    ALL = "all"
    _UNKNOWN = "__LABTESTGENERATIONMETHODFILTER_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "LabTestGenerationMethodFilter":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        auto: typing.Callable[[], T_Result],
        manual: typing.Callable[[], T_Result],
        all_: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is LabTestGenerationMethodFilter.AUTO:
            return auto()
        if self is LabTestGenerationMethodFilter.MANUAL:
            return manual()
        if self is LabTestGenerationMethodFilter.ALL:
            return all_()
        return _unknown_member(self._value_)
