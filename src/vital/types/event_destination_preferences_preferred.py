# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EventDestinationPreferencesPreferred(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    CLOUD_PUBSUB = "cloud_pubsub"
    RABBITMQ = "rabbitmq"
    SVIX = "svix"
    AZURE_AMQP = "azure_amqp"
    _UNKNOWN = "__EVENTDESTINATIONPREFERENCESPREFERRED_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "EventDestinationPreferencesPreferred":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        cloud_pubsub: typing.Callable[[], T_Result],
        rabbitmq: typing.Callable[[], T_Result],
        svix: typing.Callable[[], T_Result],
        azure_amqp: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is EventDestinationPreferencesPreferred.CLOUD_PUBSUB:
            return cloud_pubsub()
        if self is EventDestinationPreferencesPreferred.RABBITMQ:
            return rabbitmq()
        if self is EventDestinationPreferencesPreferred.SVIX:
            return svix()
        if self is EventDestinationPreferencesPreferred.AZURE_AMQP:
            return azure_amqp()
        return _unknown_member(self._value_)
