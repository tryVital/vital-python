# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class IntervalTimeseriesExprTimeseries(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    STEPS = "steps"
    DISTANCE = "distance"
    VO_2_MAX = "vo2_max"
    HEART_RATE_ALERT = "heart_rate_alert"
    STAND_HOUR = "stand_hour"
    SLEEP_BREATHING_DISTURBANCE = "sleep_breathing_disturbance"
    INSULIN_INJECTION = "insulin_injection"
    WATER = "water"
    CAFFEINE = "caffeine"
    MINDFULNESS_MINUTES = "mindfulness_minutes"
    CALORIES_ACTIVE = "calories_active"
    FLOORS_CLIMBED = "floors_climbed"
    CALORIES_BASAL = "calories_basal"
    AFIB_BURDEN = "afib_burden"
    STAND_DURATION = "stand_duration"
    SLEEP_APNEA_ALERT = "sleep_apnea_alert"
    WHEELCHAIR_PUSH = "wheelchair_push"
    FORCED_EXPIRATORY_VOLUME_1 = "forced_expiratory_volume_1"
    FORCED_VITAL_CAPACITY = "forced_vital_capacity"
    PEAK_EXPIRATORY_FLOW_RATE = "peak_expiratory_flow_rate"
    INHALER_USAGE = "inhaler_usage"
    FALL = "fall"
    UV_EXPOSURE = "uv_exposure"
    DAYLIGHT_EXPOSURE = "daylight_exposure"
    HANDWASHING = "handwashing"
    BASAL_BODY_TEMPERATURE = "basal_body_temperature"
    BODY_MASS_INDEX = "body_mass_index"
    LEAN_BODY_MASS = "lean_body_mass"
    WAIST_CIRCUMFERENCE = "waist_circumference"
    HEART_RATE_RECOVERY_ONE_MINUTE = "heart_rate_recovery_one_minute"
    WORKOUT_SWIMMING_STROKE = "workout_swimming_stroke"
    WORKOUT_DISTANCE = "workout_distance"
    CARBOHYDRATES = "carbohydrates"
    _UNKNOWN = "__INTERVALTIMESERIESEXPRTIMESERIES_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "IntervalTimeseriesExprTimeseries":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        steps: typing.Callable[[], T_Result],
        distance: typing.Callable[[], T_Result],
        vo_2_max: typing.Callable[[], T_Result],
        heart_rate_alert: typing.Callable[[], T_Result],
        stand_hour: typing.Callable[[], T_Result],
        sleep_breathing_disturbance: typing.Callable[[], T_Result],
        insulin_injection: typing.Callable[[], T_Result],
        water: typing.Callable[[], T_Result],
        caffeine: typing.Callable[[], T_Result],
        mindfulness_minutes: typing.Callable[[], T_Result],
        calories_active: typing.Callable[[], T_Result],
        floors_climbed: typing.Callable[[], T_Result],
        calories_basal: typing.Callable[[], T_Result],
        afib_burden: typing.Callable[[], T_Result],
        stand_duration: typing.Callable[[], T_Result],
        sleep_apnea_alert: typing.Callable[[], T_Result],
        wheelchair_push: typing.Callable[[], T_Result],
        forced_expiratory_volume_1: typing.Callable[[], T_Result],
        forced_vital_capacity: typing.Callable[[], T_Result],
        peak_expiratory_flow_rate: typing.Callable[[], T_Result],
        inhaler_usage: typing.Callable[[], T_Result],
        fall: typing.Callable[[], T_Result],
        uv_exposure: typing.Callable[[], T_Result],
        daylight_exposure: typing.Callable[[], T_Result],
        handwashing: typing.Callable[[], T_Result],
        basal_body_temperature: typing.Callable[[], T_Result],
        body_mass_index: typing.Callable[[], T_Result],
        lean_body_mass: typing.Callable[[], T_Result],
        waist_circumference: typing.Callable[[], T_Result],
        heart_rate_recovery_one_minute: typing.Callable[[], T_Result],
        workout_swimming_stroke: typing.Callable[[], T_Result],
        workout_distance: typing.Callable[[], T_Result],
        carbohydrates: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is IntervalTimeseriesExprTimeseries.STEPS:
            return steps()
        if self is IntervalTimeseriesExprTimeseries.DISTANCE:
            return distance()
        if self is IntervalTimeseriesExprTimeseries.VO_2_MAX:
            return vo_2_max()
        if self is IntervalTimeseriesExprTimeseries.HEART_RATE_ALERT:
            return heart_rate_alert()
        if self is IntervalTimeseriesExprTimeseries.STAND_HOUR:
            return stand_hour()
        if self is IntervalTimeseriesExprTimeseries.SLEEP_BREATHING_DISTURBANCE:
            return sleep_breathing_disturbance()
        if self is IntervalTimeseriesExprTimeseries.INSULIN_INJECTION:
            return insulin_injection()
        if self is IntervalTimeseriesExprTimeseries.WATER:
            return water()
        if self is IntervalTimeseriesExprTimeseries.CAFFEINE:
            return caffeine()
        if self is IntervalTimeseriesExprTimeseries.MINDFULNESS_MINUTES:
            return mindfulness_minutes()
        if self is IntervalTimeseriesExprTimeseries.CALORIES_ACTIVE:
            return calories_active()
        if self is IntervalTimeseriesExprTimeseries.FLOORS_CLIMBED:
            return floors_climbed()
        if self is IntervalTimeseriesExprTimeseries.CALORIES_BASAL:
            return calories_basal()
        if self is IntervalTimeseriesExprTimeseries.AFIB_BURDEN:
            return afib_burden()
        if self is IntervalTimeseriesExprTimeseries.STAND_DURATION:
            return stand_duration()
        if self is IntervalTimeseriesExprTimeseries.SLEEP_APNEA_ALERT:
            return sleep_apnea_alert()
        if self is IntervalTimeseriesExprTimeseries.WHEELCHAIR_PUSH:
            return wheelchair_push()
        if self is IntervalTimeseriesExprTimeseries.FORCED_EXPIRATORY_VOLUME_1:
            return forced_expiratory_volume_1()
        if self is IntervalTimeseriesExprTimeseries.FORCED_VITAL_CAPACITY:
            return forced_vital_capacity()
        if self is IntervalTimeseriesExprTimeseries.PEAK_EXPIRATORY_FLOW_RATE:
            return peak_expiratory_flow_rate()
        if self is IntervalTimeseriesExprTimeseries.INHALER_USAGE:
            return inhaler_usage()
        if self is IntervalTimeseriesExprTimeseries.FALL:
            return fall()
        if self is IntervalTimeseriesExprTimeseries.UV_EXPOSURE:
            return uv_exposure()
        if self is IntervalTimeseriesExprTimeseries.DAYLIGHT_EXPOSURE:
            return daylight_exposure()
        if self is IntervalTimeseriesExprTimeseries.HANDWASHING:
            return handwashing()
        if self is IntervalTimeseriesExprTimeseries.BASAL_BODY_TEMPERATURE:
            return basal_body_temperature()
        if self is IntervalTimeseriesExprTimeseries.BODY_MASS_INDEX:
            return body_mass_index()
        if self is IntervalTimeseriesExprTimeseries.LEAN_BODY_MASS:
            return lean_body_mass()
        if self is IntervalTimeseriesExprTimeseries.WAIST_CIRCUMFERENCE:
            return waist_circumference()
        if self is IntervalTimeseriesExprTimeseries.HEART_RATE_RECOVERY_ONE_MINUTE:
            return heart_rate_recovery_one_minute()
        if self is IntervalTimeseriesExprTimeseries.WORKOUT_SWIMMING_STROKE:
            return workout_swimming_stroke()
        if self is IntervalTimeseriesExprTimeseries.WORKOUT_DISTANCE:
            return workout_distance()
        if self is IntervalTimeseriesExprTimeseries.CARBOHYDRATES:
            return carbohydrates()
        return _unknown_member(self._value_)
