# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class CervicalMucusEntryQuality(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    DRY = "dry"
    STICKY = "sticky"
    CREAMY = "creamy"
    WATERY = "watery"
    EGG_WHITE = "egg_white"
    _UNKNOWN = "__CERVICALMUCUSENTRYQUALITY_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "CervicalMucusEntryQuality":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        dry: typing.Callable[[], T_Result],
        sticky: typing.Callable[[], T_Result],
        creamy: typing.Callable[[], T_Result],
        watery: typing.Callable[[], T_Result],
        egg_white: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is CervicalMucusEntryQuality.DRY:
            return dry()
        if self is CervicalMucusEntryQuality.STICKY:
            return sticky()
        if self is CervicalMucusEntryQuality.CREAMY:
            return creamy()
        if self is CervicalMucusEntryQuality.WATERY:
            return watery()
        if self is CervicalMucusEntryQuality.EGG_WHITE:
            return egg_white()
        return _unknown_member(self._value_)
