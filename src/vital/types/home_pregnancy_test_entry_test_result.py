# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class HomePregnancyTestEntryTestResult(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    NEGATIVE = "negative"
    POSITIVE = "positive"
    INDETERMINATE = "indeterminate"
    _UNKNOWN = "__HOMEPREGNANCYTESTENTRYTESTRESULT_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "HomePregnancyTestEntryTestResult":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        negative: typing.Callable[[], T_Result],
        positive: typing.Callable[[], T_Result],
        indeterminate: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is HomePregnancyTestEntryTestResult.NEGATIVE:
            return negative()
        if self is HomePregnancyTestEntryTestResult.POSITIVE:
            return positive()
        if self is HomePregnancyTestEntryTestResult.INDETERMINATE:
            return indeterminate()
        return _unknown_member(self._value_)
