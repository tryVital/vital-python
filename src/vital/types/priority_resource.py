# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PriorityResource(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    WORKOUTS = "workouts"
    ACTIVITY = "activity"
    SLEEP = "sleep"
    BODY = "body"
    TIMESERIES = "timeseries"
    _UNKNOWN = "__PRIORITYRESOURCE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "PriorityResource":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        workouts: typing.Callable[[], T_Result],
        activity: typing.Callable[[], T_Result],
        sleep: typing.Callable[[], T_Result],
        body: typing.Callable[[], T_Result],
        timeseries: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is PriorityResource.WORKOUTS:
            return workouts()
        if self is PriorityResource.ACTIVITY:
            return activity()
        if self is PriorityResource.SLEEP:
            return sleep()
        if self is PriorityResource.BODY:
            return body()
        if self is PriorityResource.TIMESERIES:
            return timeseries()
        return _unknown_member(self._value_)
