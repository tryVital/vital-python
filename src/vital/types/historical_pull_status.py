# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class HistoricalPullStatus(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    SUCCESS = "success"
    FAILURE = "failure"
    IN_PROGRESS = "in_progress"
    SCHEDULED = "scheduled"
    RETRYING = "retrying"
    _UNKNOWN = "__HISTORICALPULLSTATUS_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "HistoricalPullStatus":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        success: typing.Callable[[], T_Result],
        failure: typing.Callable[[], T_Result],
        in_progress: typing.Callable[[], T_Result],
        scheduled: typing.Callable[[], T_Result],
        retrying: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is HistoricalPullStatus.SUCCESS:
            return success()
        if self is HistoricalPullStatus.FAILURE:
            return failure()
        if self is HistoricalPullStatus.IN_PROGRESS:
            return in_progress()
        if self is HistoricalPullStatus.SCHEDULED:
            return scheduled()
        if self is HistoricalPullStatus.RETRYING:
            return retrying()
        return _unknown_member(self._value_)
