# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .client_facing_insulin_injection_sample_type import ClientFacingInsulinInjectionSampleType
from .client_facing_sample_grouping_keys import ClientFacingSampleGroupingKeys
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ClientFacingInsulinInjectionSample(UniversalBaseModel):
    id: typing.Optional[int] = pydantic.Field(default=None)
    """
    Deprecated
    """

    timezone_offset: typing.Optional[int] = pydantic.Field(default=None)
    """
    Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
    """

    type: ClientFacingInsulinInjectionSampleType = pydantic.Field()
    """
    Insulin type: rapid vs long acting
    """

    unit: typing.Literal["unit"] = "unit"
    grouping: typing.Optional[ClientFacingSampleGroupingKeys] = None
    timestamp: dt.datetime = pydantic.Field()
    """
    Depracated. The start time (inclusive) of the interval.
    """

    start: dt.datetime = pydantic.Field()
    """
    The start time (inclusive) of the interval.
    """

    end: dt.datetime = pydantic.Field()
    """
    The end time (exclusive) of the interval.
    """

    value: float = pydantic.Field()
    """
    The recorded value for the interval.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
