# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PeriodUnit(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    MINUTE = "minute"
    HOUR = "hour"
    DAY = "day"
    WEEK = "week"
    MONTH = "month"
    YEAR = "year"
    _UNKNOWN = "__PERIODUNIT_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "PeriodUnit":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        minute: typing.Callable[[], T_Result],
        hour: typing.Callable[[], T_Result],
        day: typing.Callable[[], T_Result],
        week: typing.Callable[[], T_Result],
        month: typing.Callable[[], T_Result],
        year: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is PeriodUnit.MINUTE:
            return minute()
        if self is PeriodUnit.HOUR:
            return hour()
        if self is PeriodUnit.DAY:
            return day()
        if self is PeriodUnit.WEEK:
            return week()
        if self is PeriodUnit.MONTH:
            return month()
        if self is PeriodUnit.YEAR:
            return year()
        return _unknown_member(self._value_)
