# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class QuestionType(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    CHOICE = "choice"
    TEXT = "text"
    NUMERIC = "numeric"
    MULTI_CHOICE = "multi_choice"
    _UNKNOWN = "__QUESTIONTYPE_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "QuestionType":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        choice: typing.Callable[[], T_Result],
        text: typing.Callable[[], T_Result],
        numeric: typing.Callable[[], T_Result],
        multi_choice: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is QuestionType.CHOICE:
            return choice()
        if self is QuestionType.TEXT:
            return text()
        if self is QuestionType.NUMERIC:
            return numeric()
        if self is QuestionType.MULTI_CHOICE:
            return multi_choice()
        return _unknown_member(self._value_)
