# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class LabLocationCapability(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    STAT = "stat"
    APPOINTMENT_SCHEDULING_VIA_JUNCTION = "appointment_scheduling_via_junction"
    APPOINTMENT_SCHEDULING_WITH_LAB = "appointment_scheduling_with_lab"
    _UNKNOWN = "__LABLOCATIONCAPABILITY_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "LabLocationCapability":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        stat: typing.Callable[[], T_Result],
        appointment_scheduling_via_junction: typing.Callable[[], T_Result],
        appointment_scheduling_with_lab: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is LabLocationCapability.STAT:
            return stat()
        if self is LabLocationCapability.APPOINTMENT_SCHEDULING_VIA_JUNCTION:
            return appointment_scheduling_via_junction()
        if self is LabLocationCapability.APPOINTMENT_SCHEDULING_WITH_LAB:
            return appointment_scheduling_with_lab()
        return _unknown_member(self._value_)
