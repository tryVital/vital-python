# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .lab_results_metadata import LabResultsMetadata
from .lab_results_raw_results import LabResultsRawResults
from .missing_biomarker_result import MissingBiomarkerResult
from .sample_data import SampleData


class LabResultsRaw(UniversalBaseModel):
    metadata: LabResultsMetadata
    results: LabResultsRawResults
    missing_results: typing.Optional[typing.List[MissingBiomarkerResult]] = None
    sample_information: typing.Optional[typing.Dict[str, typing.Optional[SampleData]]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
