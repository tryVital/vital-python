# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class AppointmentStatus(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    CONFIRMED = "confirmed"
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    CANCELLED = "cancelled"
    _UNKNOWN = "__APPOINTMENTSTATUS_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "AppointmentStatus":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        confirmed: typing.Callable[[], T_Result],
        pending: typing.Callable[[], T_Result],
        in_progress: typing.Callable[[], T_Result],
        completed: typing.Callable[[], T_Result],
        cancelled: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is AppointmentStatus.CONFIRMED:
            return confirmed()
        if self is AppointmentStatus.PENDING:
            return pending()
        if self is AppointmentStatus.IN_PROGRESS:
            return in_progress()
        if self is AppointmentStatus.COMPLETED:
            return completed()
        if self is AppointmentStatus.CANCELLED:
            return cancelled()
        return _unknown_member(self._value_)
