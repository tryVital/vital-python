# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class MenstrualFlowEntryFlow(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    UNSPECIFIED = "unspecified"
    NONE = "none"
    LIGHT = "light"
    MEDIUM = "medium"
    HEAVY = "heavy"
    _UNKNOWN = "__MENSTRUALFLOWENTRYFLOW_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "MenstrualFlowEntryFlow":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        unspecified: typing.Callable[[], T_Result],
        none: typing.Callable[[], T_Result],
        light: typing.Callable[[], T_Result],
        medium: typing.Callable[[], T_Result],
        heavy: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is MenstrualFlowEntryFlow.UNSPECIFIED:
            return unspecified()
        if self is MenstrualFlowEntryFlow.NONE:
            return none()
        if self is MenstrualFlowEntryFlow.LIGHT:
            return light()
        if self is MenstrualFlowEntryFlow.MEDIUM:
            return medium()
        if self is MenstrualFlowEntryFlow.HEAVY:
            return heavy()
        return _unknown_member(self._value_)
