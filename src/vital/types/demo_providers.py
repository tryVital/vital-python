# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class DemoProviders(str, enum.Enum):
    """
    ℹ️ This enum is non-exhaustive.
    """

    APPLE_HEALTH_KIT = "apple_health_kit"
    FITBIT = "fitbit"
    FREESTYLE_LIBRE = "freestyle_libre"
    OURA = "oura"
    _UNKNOWN = "__DEMOPROVIDERS_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "DemoProviders":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        apple_health_kit: typing.Callable[[], T_Result],
        fitbit: typing.Callable[[], T_Result],
        freestyle_libre: typing.Callable[[], T_Result],
        oura: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is DemoProviders.APPLE_HEALTH_KIT:
            return apple_health_kit()
        if self is DemoProviders.FITBIT:
            return fitbit()
        if self is DemoProviders.FREESTYLE_LIBRE:
            return freestyle_libre()
        if self is DemoProviders.OURA:
            return oura()
        return _unknown_member(self._value_)
